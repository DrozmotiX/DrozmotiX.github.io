(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{373:function(e,t,n){e.exports=n.p+"assets/img/stateExample.f16bd4b1.png"},435:function(e,t,n){"use strict";n.r(t);var a=n(19),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"konfigurations-beispiel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#konfigurations-beispiel"}},[e._v("#")]),e._v(" Konfigurations Beispiel")]),e._v(" "),a("h2",{attrs:{id:"api-aktivieren"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-aktivieren"}},[e._v("#")]),e._v(" API Aktivieren")]),e._v(" "),a("p",[e._v("Bitte stellen Sie sicher, dass die API aktiviert ist! Optional kann ein Kennwort definieren werden.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("api:\n  password: 'MyPassword'\n")])])]),a("p",[e._v("Der Adapter erkennt automatisch von ESPHome verwaltete Ger√§te und synchronisiert deren Daten mit ioBroker "),a("a",{attrs:{href:"https://esphome.io/components/api.html?highlight=api",target:"_blank",rel:"noopener noreferrer"}},[e._v("Siehe Referenz zur ESPHome-API"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"beispiel-konfiguration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beispiel-konfiguration"}},[e._v("#")]),e._v(" Beispiel Konfiguration")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('esphome:\n  name: sensor_badkamer\n  platform: ESP32\n  board: esp-wrover-kit\n\nwifi:\n  use_address: 192.168.10.122\n  ssid: "xxxxx"\n  password: "xxxxxx"\n          \n# Enable ESPHome API\napi:\n\n# Activate i2c bus  \ni2c:\n  sda: 21\n  scl: 22\n  scan: True\n  id: bus_a\n  \n# Example configuration for bh1750\nsensor:\n  - platform: bh1750\n    name: "Hal_Illuminance"\n    address: 0x23\n    measurement_time: 69\n    update_interval: 10s\n    \n# Example configuration for an GPIO output    \noutput:\n  - platform: gpio\n    pin: 12\n    inverted: true\n    id: gpio_12\n    \n# Example configuration linking a switch to the previous defined output\nswitch:\n  - platform: output\n    name: "Generic Output"\n    output: \'gpio_12\'\n    \n')])])]),a("h2",{attrs:{id:"iobroker-states"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iobroker-states"}},[e._v("#")]),e._v(" ioBroker states")]),e._v(" "),a("p",[a("img",{attrs:{src:n(373),alt:"ioBroker state Exaples"}})])])}),[],!1,null,null,null);t.default=i.exports}}]);